# -*- mode: ruby -*-
# vi: set ft=ruby :

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

$DATABASE_PROVISIONING_SCRIPT = <<SCRIPT

#Will be 1 if installed, or 0 if not
ANSIBLE_INSTALLED=`which ansible-playbook | wc -l`

if [ "$ANSIBLE_INSTALLED" == "1" ]; then

  echo "Skipping ansible install since it's already installed."

else
  echo "You are about to see some red error messages about tty and stdin, but can just ignore them."

  #first, update our apt-get cache
  sudo apt-get update

  #Now, install python-software-properties so we have the "add-apt-repository" command available
  sudo apt-get -y install python-software-properties
  sudo add-apt-repository ppa:ansible/ansible

  #Now we run this again so that we get the very latest version of ansible's repository
  sudo apt-get update

  #finally, install ansible
  sudo apt-get -y install ansible
fi

echo "Provisioning with Ansible..."

# We set PYTHONUNBUFFERED to true so that ansible-playbook output appears "live" when Vagrant provisioning
sudo PYTHONUNBUFFERED=1 ansible-playbook /vagrant/provisioning/playbook.yml --connection=local -i "[database]127.0.0.1,"

SCRIPT

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
    config.vm.box = "peterrehm/symfony-php7"
    config.vm.network "private_network", ip: "33.33.33.130"
    config.vm.hostname = "hostname.loc"

    config.vm.synced_folder ".", "/vagrant",
    	:nfs => (RUBY_PLATFORM =~ /linux/ or RUBY_PLATFORM =~ /darwin/)

    #config.vm.provision :ansible_local do |ansible|
    #    ansible.install = true
    #    ansible.playbook = "provisioning/playbook.yml"
    #end

    # needed until 1.8.2 unless you have patched like
    # https://github.com/mitchellh/vagrant/commit/9dbdb9397a92d4fc489e9afcb022621df7f60d11 yourself
    config.vm.provision :shell,
        :inline => $DATABASE_PROVISIONING_SCRIPT

    config.vm.provider "virtualbox" do |vb|
        vb.customize ["modifyvm", :id, "--memory", "8192"]
    end
end